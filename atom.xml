<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://NiceKatan.github.io</id>
    <title>Katan&apos;s Blog</title>
    <updated>2021-03-06T05:45:52.842Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://NiceKatan.github.io"/>
    <link rel="self" href="https://NiceKatan.github.io/atom.xml"/>
    <subtitle>想让自己变成更好的人</subtitle>
    <logo>https://NiceKatan.github.io/images/avatar.png</logo>
    <icon>https://NiceKatan.github.io/favicon.ico</icon>
    <rights>All rights reserved 2021, Katan&apos;s Blog</rights>
    <entry>
        <title type="html"><![CDATA[LeetCode 503.下一个更大元素 II]]></title>
        <id>https://NiceKatan.github.io/post/LC-503/</id>
        <link href="https://NiceKatan.github.io/post/LC-503/">
        </link>
        <updated>2021-03-06T02:41:24.000Z</updated>
        <content type="html"><![CDATA[<h2 id="a-hrefhttpsleetcode-cncomproblemsnext-greater-element-ii-target_blank下一个更大元素-iia"><strong>「 <a href="https://leetcode-cn.com/problems/next-greater-element-ii/" target="_blank">下一个更大元素 II</a> 」</strong></h2>
<p><br></br></p>
<h3 id="暴力双循环嵌套判断结果">暴力双循环嵌套判断结果</h3>
<p><img src="https://NiceKatan.github.io/post-images/1615008006558.jpeg" alt="" loading="lazy"><br>
<strong>1.优化查找次数</strong></p>
<p><strong>朴素暴力</strong>求解法，是对每个数向右遍历，直到找到下一个比它大的数，时间复杂度为<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo>(</mo><msup><mi>n</mi><mn>2</mn></msup><mo>)</mo></mrow><annotation encoding="application/x-tex">O(n^{2})</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.064108em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault">n</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span>。同时暴力解法中会有浪费算力的情况，如<code>[4,3,2,6]</code>，暴力法会对<code>[4,3,2]</code>依次向后遍历，当寻找到6的时候才会停止遍历，而对于<code>[3,2]</code>来说显然是没有必要的，因为他们均小于4，它们下一个更大的元素一定和4相同，不需要重复遍历。根据数据元素单调的特性，就可以采用「<strong>单调栈</strong>」来实现。「<strong>单调栈</strong>」顾名思义是栈底到栈顶元素均<strong>单调递增</strong>或<strong>单调递减</strong>的，对于类似「找到比当前值大/小的最近元素」类似问题都可以用「<strong>单调栈</strong>」来解决。</p>
<p><strong>具体实现：</strong></p>
<p>对数组进行遍历，在入栈之前进行判断：</p>
<ul>
<li>判断当前元素和栈顶元素大小关系：
<ul>
<li>当前元素&gt;栈顶元素：即当前元素可作为栈顶元素的「更大元素」，栈顶元素出栈，直到栈顶元素&gt;当前元素停止。</li>
<li>当前元素&lt;栈顶元素：即当前元素与栈顶元素拥有同一个「更大元素」，当前元素<strong>下标</strong>入栈。</li>
</ul>
</li>
<li>栈空入栈。</li>
</ul>
<p><strong>注意：栈内元素为元素下标而非元素本身，栈内元素可有存留(为数组最大值)。</strong></p>
<p><strong>2.实现循环数组</strong></p>
<p>由于题目给定一个循环数组(最后一个元素的下一个元素是数组的第一个元素)，因此我们采用遍历<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>2</mn><mo>∗</mo><mi>n</mi><mi>u</mi><mi>m</mi><mi>s</mi></mrow><annotation encoding="application/x-tex">2*nums</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">2</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">n</span><span class="mord mathdefault">u</span><span class="mord mathdefault">m</span><span class="mord mathdefault">s</span></span></span></span>长度的方法，对 下标 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>i</mi></mrow><annotation encoding="application/x-tex">i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.65952em;vertical-align:0em;"></span><span class="mord mathdefault">i</span></span></span></span> 进行取模运算，实现循环数组。</p>
<h3 id="代码">代码</h3>
<pre><code class="language-c++">class Solution {
public:
    vector&lt;int&gt; nextGreaterElements(vector&lt;int&gt;&amp; nums) {
        stack&lt;int&gt; temp;
        int n=nums.size();
        vector&lt;int&gt; res(n,-1);
        for(int i=0;i&lt;n*2;i++){
            while(!temp.empty()&amp;&amp;nums[i%n]&gt;nums[temp.top()]){
                res[temp.top()]=nums[i%n];
                temp.pop();
            }
            temp.push(i%n);
        }
        return res;
    }
};
</code></pre>
<ul>
<li>时间复杂度：<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo>(</mo><mi>n</mi><mo>)</mo></mrow><annotation encoding="application/x-tex">O(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mclose">)</span></span></span></span></li>
<li>空间复杂度：<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo>(</mo><mi>n</mi><mo>)</mo></mrow><annotation encoding="application/x-tex">O(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mclose">)</span></span></span></span></li>
</ul>
]]></content>
    </entry>
</feed>