<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://NiceKatan.github.io</id>
    <title>Katan&apos;s Blog</title>
    <updated>2021-03-07T07:01:45.488Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://NiceKatan.github.io"/>
    <link rel="self" href="https://NiceKatan.github.io/atom.xml"/>
    <subtitle>想让自己变成更好的人</subtitle>
    <logo>https://NiceKatan.github.io/images/avatar.png</logo>
    <icon>https://NiceKatan.github.io/favicon.ico</icon>
    <rights>All rights reserved 2021, Katan&apos;s Blog</rights>
    <entry>
        <title type="html"><![CDATA[LeetCode 131.分割回文串]]></title>
        <id>https://NiceKatan.github.io/post/leetcode-153/</id>
        <link href="https://NiceKatan.github.io/post/leetcode-153/">
        </link>
        <updated>2021-03-07T06:57:10.000Z</updated>
        <content type="html"><![CDATA[<h2 id="a-hrefhttpsleetcode-cncomproblemspalindrome-partitioning-target_blank分割回文串a"><strong>「 <a href="https://leetcode-cn.com/problems/palindrome-partitioning/" target="_blank">分割回文串</a> 」</strong></h2>
<ul>
<li>题意：将输入字符串分割为回文子串，<strong>返回所有可能的结果</strong></li>
</ul>
<p><strong>最初思想</strong></p>
<p>由于需要返回所有可能结果，不免想到穷举法，一一枚举可能结果，但思考半天不知如何暴力求解。研习<a href="https://leetcode-cn.com/problems/palindrome-partitioning/solution/fen-ge-hui-wen-chuan-by-leetcode-solutio-6jkv/">@LeetCode官方题解</a>以及<a href="https://leetcode-cn.com/problems/palindrome-partitioning/solution/hui-su-fa-si-lu-yu-mo-ban-by-fuxuemingzh-azhz/">@负雪明烛</a>后了解到可以用「<strong>回溯算法</strong>」。</p>
<blockquote>
<p>「回溯算法」相当于穷举搜索的巧妙实现，在搜索过程中寻找解，当发现不满足求解条件时就「回溯」更改路径求解。虽然性能一般不理想，但即便如此在某些情况仍然比蛮力(brute force)穷举搜索的工作量有显著节省。</p>
</blockquote>
<p><strong>基本实现</strong></p>
<ul>
<li>定义<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>p</mi><mi>a</mi><mi>t</mi><mi>h</mi></mrow><annotation encoding="application/x-tex">path</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathdefault">p</span><span class="mord mathdefault">a</span><span class="mord mathdefault">t</span><span class="mord mathdefault">h</span></span></span></span>存储当前分割路径，<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>r</mi><mi>e</mi><mi>s</mi></mrow><annotation encoding="application/x-tex">res</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mord mathdefault">e</span><span class="mord mathdefault">s</span></span></span></span>存储所有可能结果。</li>
<li>定义函数<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>i</mi><mi>s</mi><mi>P</mi><mi>a</mi><mi>l</mi><mi>i</mi><mi>n</mi><mi>d</mi><mi>r</mi><mi>o</mi><mi>m</mi><mi>e</mi><mo>(</mo><mo>)</mo></mrow><annotation encoding="application/x-tex">isPalindrome()</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">i</span><span class="mord mathdefault">s</span><span class="mord mathdefault" style="margin-right:0.13889em;">P</span><span class="mord mathdefault">a</span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault">i</span><span class="mord mathdefault">n</span><span class="mord mathdefault">d</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mord mathdefault">o</span><span class="mord mathdefault">m</span><span class="mord mathdefault">e</span><span class="mopen">(</span><span class="mclose">)</span></span></span></span>判断回文串，返回<strong>布尔值</strong>。</li>
<li>定义<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>b</mi><mi>a</mi><mi>c</mi><mi>k</mi><mi>t</mi><mi>r</mi><mi>a</mi><mi>c</mi><mi>k</mi><mo>(</mo><mo>)</mo></mrow><annotation encoding="application/x-tex">backtrack()</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">b</span><span class="mord mathdefault">a</span><span class="mord mathdefault">c</span><span class="mord mathdefault" style="margin-right:0.03148em;">k</span><span class="mord mathdefault">t</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mord mathdefault">a</span><span class="mord mathdefault">c</span><span class="mord mathdefault" style="margin-right:0.03148em;">k</span><span class="mopen">(</span><span class="mclose">)</span></span></span></span>为核心回溯算法，传参为<strong>当前路径下</strong>待搜索区域字符串<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>s</mi></mrow><annotation encoding="application/x-tex">s</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">s</span></span></span></span>。
<ul>
<li>若待搜索区域<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>s</mi></mrow><annotation encoding="application/x-tex">s</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">s</span></span></span></span>为空，将当前<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>p</mi><mi>a</mi><mi>t</mi><mi>h</mi></mrow><annotation encoding="application/x-tex">path</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathdefault">p</span><span class="mord mathdefault">a</span><span class="mord mathdefault">t</span><span class="mord mathdefault">h</span></span></span></span>内存储分割方法<strong>深度拷贝</strong>到<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>r</mi><mi>e</mi><mi>s</mi></mrow><annotation encoding="application/x-tex">res</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mord mathdefault">e</span><span class="mord mathdefault">s</span></span></span></span>中。</li>
<li>对待搜索区域采用<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>s</mi><mi>u</mi><mi>b</mi><mi>s</mi><mi>t</mi><mi>r</mi><mo>(</mo><mo>)</mo></mrow><annotation encoding="application/x-tex">substr()</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">s</span><span class="mord mathdefault">u</span><span class="mord mathdefault">b</span><span class="mord mathdefault">s</span><span class="mord mathdefault">t</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mopen">(</span><span class="mclose">)</span></span></span></span>函数进行分割并赋值<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>p</mi><mi>r</mi><mi>e</mi></mrow><annotation encoding="application/x-tex">pre</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord mathdefault">p</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mord mathdefault">e</span></span></span></span>，是回文串则将<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>p</mi><mi>r</mi><mi>e</mi></mrow><annotation encoding="application/x-tex">pre</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord mathdefault">p</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mord mathdefault">e</span></span></span></span>加入<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>p</mi><mi>a</mi><mi>t</mi><mi>h</mi></mrow><annotation encoding="application/x-tex">path</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathdefault">p</span><span class="mord mathdefault">a</span><span class="mord mathdefault">t</span><span class="mord mathdefault">h</span></span></span></span>中，去掉<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>p</mi><mi>r</mi><mi>e</mi></mrow><annotation encoding="application/x-tex">pre</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord mathdefault">p</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mord mathdefault">e</span></span></span></span>的字符串<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>s</mi></mrow><annotation encoding="application/x-tex">s</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">s</span></span></span></span>为新的探索区域。</li>
<li>一种分割路径求解后将<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>p</mi><mi>a</mi><mi>t</mi><mi>h</mi></mrow><annotation encoding="application/x-tex">path</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathdefault">p</span><span class="mord mathdefault">a</span><span class="mord mathdefault">t</span><span class="mord mathdefault">h</span></span></span></span>清空。</li>
</ul>
</li>
</ul>
<p><strong>注意:</strong>「<strong>回溯算法</strong>」采用递归实现；<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>s</mi><mi>u</mi><mi>b</mi><mi>s</mi><mi>t</mi><mi>r</mi><mo>(</mo><mi>m</mi><mi mathvariant="normal">，</mi><mi>n</mi><mo>)</mo></mrow><annotation encoding="application/x-tex">substr(m，n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">s</span><span class="mord mathdefault">u</span><span class="mord mathdefault">b</span><span class="mord mathdefault">s</span><span class="mord mathdefault">t</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mopen">(</span><span class="mord mathdefault">m</span><span class="mord cjk_fallback">，</span><span class="mord mathdefault">n</span><span class="mclose">)</span></span></span></span>,其中<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>m</mi></mrow><annotation encoding="application/x-tex">m</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">m</span></span></span></span>为截取字符串起始处，<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">n</span></span></span></span>为截取字符串长度。</p>
<p><strong>代码</strong></p>
<pre><code class="language-c++">class Solution {
public:
    vector&lt;vector&lt;string&gt;&gt; partition(string s) {
        vector&lt;vector&lt;string&gt;&gt; res;
        backtrack(s,res,{});
        return res;
    }
    void backtrack(string s,vector&lt;vector&lt;string&gt;&gt;&amp; res,vector&lt;string&gt; path){
        if(s.size()==0){
            res.push_back(path);
            return;
        }
        for(int i=1;i&lt;=s.size();i++){
            string pre=s.substr(0,i);
            if(isPalindrome(pre)){
                path.push_back(pre);
                backtrack(s.substr(i),res,path);
                path.pop_back();
            }
        }
    }
    bool isPalindrome(string s){
        if (s.size() == 0) return true;
        int left=0,right=s.size()-1;
        while(left&lt;=right){
            if(s[left++]!=s[right--])
                return false;
        }
        return true;
    }
};
</code></pre>
<ul>
<li><strong>时间复杂度：</strong><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo>(</mo><mi>n</mi><mo>∗</mo><msup><mn>2</mn><mi>n</mi></msup><mo>)</mo></mrow><annotation encoding="application/x-tex">O(n*2^n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.664392em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">n</span></span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span>。<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">n</span></span></span></span>是字符串<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>s</mi></mrow><annotation encoding="application/x-tex">s</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">s</span></span></span></span>的长度。在最坏情况下，<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>s</mi></mrow><annotation encoding="application/x-tex">s</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">s</span></span></span></span>包含<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">n</span></span></span></span>个完全相同的字符，因此他的任何一种划分方法都满足要求。而长度为<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">n</span></span></span></span>的字符串的划分方案数为<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msup><mn>2</mn><mrow><mi>n</mi><mo>−</mo><mn>1</mn></mrow></msup><mo>=</mo><mi>O</mi><mo>(</mo><msup><mn>2</mn><mi>n</mi></msup><mo>)</mo></mrow><annotation encoding="application/x-tex">2^{n-1}=O(2^n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8141079999999999em;vertical-align:0em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">n</span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.664392em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">n</span></span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span>，每一种划分方法需要<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo>(</mo><mi>n</mi><mo>)</mo></mrow><annotation encoding="application/x-tex">O(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mclose">)</span></span></span></span>的时间求出是否为回文串。</li>
<li><strong>空间复杂度：</strong><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo>(</mo><mi>n</mi><mo>∗</mo><msup><mn>2</mn><mi>n</mi></msup><mo>)</mo></mrow><annotation encoding="application/x-tex">O(n*2^n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.664392em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">n</span></span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span>。在最欢情况下嘛，答案中包括<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msup><mn>2</mn><mrow><mi>n</mi><mo>−</mo><mn>1</mn></mrow></msup></mrow><annotation encoding="application/x-tex">2^{n-1}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8141079999999999em;vertical-align:0em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">n</span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span></span></span></span></span></span></span></span></span>种划分方法，每种方法需要<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo>(</mo><mi>n</mi><mo>)</mo></mrow><annotation encoding="application/x-tex">O(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mclose">)</span></span></span></span>的空间进行储存。</li>
</ul>
<p><strong>该题还可以将「回溯算法」与「动态规划」结合(设计状态转移方程)，进一步优化回文串判断算法。</strong></p>
<p><strong>提交后台几乎双百代码(有时间研习一下)</strong></p>
<pre><code class="language-c++">class Solution {
private:
    vector&lt;vector&lt;string&gt;&gt; result;
    vector&lt;string&gt; path; // 放已经回文的子串
    void backtracking (const string&amp; s, int startIndex) {
        // 如果起始位置已经大于s的大小，说明已经找到了一组分割方案了
        if (startIndex &gt;= s.size()) {
            result.push_back(path);
            return;
        }
        for (int i = startIndex; i &lt; s.size(); i++) {
            if (isPalindrome(s, startIndex, i)) {   // 是回文子串
                // 获取[startIndex,i]在s中的子串
                string str = s.substr(startIndex, i - startIndex + 1);
                path.push_back(str);
            } else {                                // 不是回文，跳过
                continue;
            }
            backtracking(s, i + 1); // 寻找i+1为起始位置的子串
            path.pop_back(); // 回溯过程，弹出本次已经填在的子串
        }
    }
    bool isPalindrome(const string&amp; s, int start, int end) {
        for (int i = start, j = end; i &lt; j; i++, j--) {
            if (s[i] != s[j])
                return false;
        }
        return true;
    }
public:
    vector&lt;vector&lt;string&gt;&gt; partition(string s) {
        result.clear();
        path.clear();
        backtracking(s, 0);
        return result;
    }
};
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[LeetCode 503.下一个更大元素 II]]></title>
        <id>https://NiceKatan.github.io/post/LC-503/</id>
        <link href="https://NiceKatan.github.io/post/LC-503/">
        </link>
        <updated>2021-03-06T02:41:24.000Z</updated>
        <content type="html"><![CDATA[<h2 id="a-hrefhttpsleetcode-cncomproblemsnext-greater-element-ii-target_blank下一个更大元素-iia"><strong>「 <a href="https://leetcode-cn.com/problems/next-greater-element-ii/" target="_blank">下一个更大元素 II</a> 」</strong></h2>
<p><br></br></p>
<h3 id="暴力双循环嵌套判断结果">暴力双循环嵌套判断结果</h3>
<p><img src="https://NiceKatan.github.io/post-images/1615008006558.jpeg" alt="" loading="lazy"><br>
<strong>1.优化查找次数</strong></p>
<p><strong>朴素暴力</strong>求解法，是对每个数向右遍历，直到找到下一个比它大的数，时间复杂度为O(n^2)。同时暴力解法中会有浪费算力的情况，如<code>[4,3,2,6]</code>，暴力法会对<code>[4,3,2]</code>依次向后遍历，当寻找到6的时候才会停止遍历，而对于<code>[3,2]</code>来说显然是没有必要的，因为他们均小于4，它们下一个更大的元素一定和4相同，不需要重复遍历。根据数据元素单调的特性，就可以采用「<strong>单调栈</strong>」来实现。「<strong>单调栈</strong>」顾名思义是栈底到栈顶元素均<strong>单调递增</strong>或<strong>单调递减</strong>的，对于类似「找到比当前值大/小的最近元素」的问题都可以用「<strong>单调栈</strong>」来解决。</p>
<p><strong>具体实现：</strong></p>
<p>对数组进行遍历，在入栈之前进行判断：</p>
<ul>
<li>判断当前元素和栈顶元素大小关系：
<ul>
<li>当前元素&gt;栈顶元素：即当前元素可作为栈顶元素的「更大元素」，栈顶元素出栈，直到栈顶元素&gt;当前元素停止。</li>
<li>当前元素&lt;栈顶元素：即当前元素与栈顶元素拥有同一个「更大元素」，当前元素<strong>下标</strong>入栈。</li>
</ul>
</li>
<li>栈空入栈。</li>
</ul>
<p><strong>注意：栈内元素为元素下标而非元素本身，栈内元素可有存留(为数组最大值)。</strong></p>
<p><strong>2.实现循环数组</strong></p>
<p>由于题目给定一个循环数组(最后一个元素的下一个元素是数组的第一个元素)，因此我们采用遍历2*nums长度的方法，对下标 i 进行取模运算，实现循环数组。</p>
<h3 id="代码">代码</h3>
<pre><code class="language-c++">class Solution {
public:
    vector&lt;int&gt; nextGreaterElements(vector&lt;int&gt;&amp; nums) {
        stack&lt;int&gt; temp;
        int n=nums.size();
        vector&lt;int&gt; res(n,-1);
        for(int i=0;i&lt;n*2;i++){
            while(!temp.empty()&amp;&amp;nums[i%n]&gt;nums[temp.top()]){
                res[temp.top()]=nums[i%n];
                temp.pop();
            }
            temp.push(i%n);
        }
        return res;
    }
};
</code></pre>
<ul>
<li>时间复杂度：O(n)</li>
<li>空间复杂度：O(n)</li>
</ul>
]]></content>
    </entry>
</feed>